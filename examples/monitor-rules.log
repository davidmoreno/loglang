/Log started: (.*)/ log.started.date = $1
/Log ended: (.*)/ log.ended.date = $1

#/([^ ]) (.*)/  [$1] = $2
#/^$/
#/Unpacking .* (.*/ unpacking = $1

# some initial values, to prevent non defined errors
cpu.cpu.idle 0
cpu.cpu.nice 0
mem.free 0
mem.cached 0
mem.total 0


# mem to %
:mem.free%  at mem.free do easy.mem.free% = round( ( mem.free + mem.cached ) * 100.0 / mem.total , 2 )

# cpu is more complex, need jiffies diference from last. Order is important.
:_.cpu.sum_d  at timestamp do _cpu.sum_d  = sum( cpu.cpu.* ) - _cpu.sum 
:_.cpu.sum    at timestamp do _cpu.sum    = sum( cpu.cpu.* )
:_.cpu.user_d at timestamp do _cpu.user_d = ( cpu.cpu.nice + cpu.cpu.idle ) - _.cpu.user
:_.cpu.user   at timestamp do _.cpu.user  = ( cpu.cpu.nice + cpu.cpu.idle )

:cpu.cpu%   at timestamp do easy.cpu.cpu% = round( 100.0 - ( ( _cpu.user_d * 100.0 ) / _cpu.sum_d ) , 3 )

# 512 is sector size as reported.
:disk.read_d   at timestamp do easy.disk.read    = (( sum( disk.?d?.read ) - _disk.read ) * 512.0 )
:disk.read     at timestamp do _disk.read        = sum( disk.?d?.read )
:disk.write_d  at timestamp do easy.disk.write  = (( sum( disk.?d?.write ) - _disk.write ) * 512.0 )
:disk.write    at timestamp do _disk.write      = sum( disk.?d?.write )

# Same for net
:net.read_d   at timestamp do easy.net.read    = ( sum( net.*.read ) - _net.read )
:net.read     at timestamp do _net.read        = sum( net.*.read )
:net.write_d  at timestamp do easy.net.write  = ( sum( net.*.write ) - _net.write )
:net.write    at timestamp do _net.write      = sum( net.*.write )

# at end, when timestamp arrives.

:show-all   at timestamp do print("easy.*")
:showtimestamp at timestamp do print("timestamp")

# set some values for next round.
:dist.to_zero   at timestamp do { easy.disk.read=0; easy.disk.write=0; } # set to 0, then if any activity, it will change.
